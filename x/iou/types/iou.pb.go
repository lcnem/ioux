// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iou/iou.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_lcnem_ioux_types "github.com/lcnem/ioux/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Iou struct {
	Namespace string                                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty" yaml:"namespace"`
	BaseDenom string                                       `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	Issuer    github_com_lcnem_ioux_types.StringAccAddress `protobuf:"bytes,3,opt,name=issuer,proto3,customtype=github.com/lcnem/ioux/types.StringAccAddress" json:"issuer" yaml:"issuer"`
	Admin     github_com_lcnem_ioux_types.StringAccAddress `protobuf:"bytes,4,opt,name=admin,proto3,customtype=github.com/lcnem/ioux/types.StringAccAddress" json:"admin" yaml:"admin"`
}

func (m *Iou) Reset()         { *m = Iou{} }
func (m *Iou) String() string { return proto.CompactTextString(m) }
func (*Iou) ProtoMessage()    {}
func (*Iou) Descriptor() ([]byte, []int) {
	return fileDescriptor_25ea6ba5d33a6536, []int{0}
}
func (m *Iou) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Iou) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Iou.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Iou) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Iou.Merge(m, src)
}
func (m *Iou) XXX_Size() int {
	return m.Size()
}
func (m *Iou) XXX_DiscardUnknown() {
	xxx_messageInfo_Iou.DiscardUnknown(m)
}

var xxx_messageInfo_Iou proto.InternalMessageInfo

func (m *Iou) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Iou) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

type MsgCreateIou struct {
	Namespace string                                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty" yaml:"namespace"`
	BaseDenom string                                       `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	Issuer    github_com_lcnem_ioux_types.StringAccAddress `protobuf:"bytes,3,opt,name=issuer,proto3,customtype=github.com/lcnem/ioux/types.StringAccAddress" json:"issuer" yaml:"issuer"`
	Admin     github_com_lcnem_ioux_types.StringAccAddress `protobuf:"bytes,4,opt,name=admin,proto3,customtype=github.com/lcnem/ioux/types.StringAccAddress" json:"admin" yaml:"admin"`
}

func (m *MsgCreateIou) Reset()         { *m = MsgCreateIou{} }
func (m *MsgCreateIou) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIou) ProtoMessage()    {}
func (*MsgCreateIou) Descriptor() ([]byte, []int) {
	return fileDescriptor_25ea6ba5d33a6536, []int{1}
}
func (m *MsgCreateIou) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIou) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIou.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIou) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIou.Merge(m, src)
}
func (m *MsgCreateIou) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIou) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIou.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIou proto.InternalMessageInfo

func (m *MsgCreateIou) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MsgCreateIou) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

type MsgUpdateIouIssuer struct {
	Namespace string                                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty" yaml:"namespace"`
	BaseDenom string                                       `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	Issuer    github_com_lcnem_ioux_types.StringAccAddress `protobuf:"bytes,3,opt,name=issuer,proto3,customtype=github.com/lcnem/ioux/types.StringAccAddress" json:"issuer" yaml:"issuer"`
	Admin     github_com_lcnem_ioux_types.StringAccAddress `protobuf:"bytes,4,opt,name=admin,proto3,customtype=github.com/lcnem/ioux/types.StringAccAddress" json:"admin" yaml:"admin"`
}

func (m *MsgUpdateIouIssuer) Reset()         { *m = MsgUpdateIouIssuer{} }
func (m *MsgUpdateIouIssuer) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIouIssuer) ProtoMessage()    {}
func (*MsgUpdateIouIssuer) Descriptor() ([]byte, []int) {
	return fileDescriptor_25ea6ba5d33a6536, []int{2}
}
func (m *MsgUpdateIouIssuer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIouIssuer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIouIssuer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIouIssuer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIouIssuer.Merge(m, src)
}
func (m *MsgUpdateIouIssuer) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIouIssuer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIouIssuer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIouIssuer proto.InternalMessageInfo

func (m *MsgUpdateIouIssuer) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MsgUpdateIouIssuer) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

type MsgIssueIou struct {
	Namespace string                                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty" yaml:"namespace"`
	Prefix    string                                       `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty" yaml:"prefix"`
	BaseDenom string                                       `protobuf:"bytes,3,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	Issuer    github_com_lcnem_ioux_types.StringAccAddress `protobuf:"bytes,4,opt,name=issuer,proto3,customtype=github.com/lcnem/ioux/types.StringAccAddress" json:"issuer" yaml:"issuer"`
	Amount    types.Coin                                   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *MsgIssueIou) Reset()         { *m = MsgIssueIou{} }
func (m *MsgIssueIou) String() string { return proto.CompactTextString(m) }
func (*MsgIssueIou) ProtoMessage()    {}
func (*MsgIssueIou) Descriptor() ([]byte, []int) {
	return fileDescriptor_25ea6ba5d33a6536, []int{3}
}
func (m *MsgIssueIou) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueIou) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueIou.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueIou) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueIou.Merge(m, src)
}
func (m *MsgIssueIou) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueIou) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueIou.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueIou proto.InternalMessageInfo

func (m *MsgIssueIou) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MsgIssueIou) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *MsgIssueIou) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *MsgIssueIou) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgBurnIou struct {
	Namespace string                                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty" yaml:"namespace"`
	Prefix    string                                       `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty" yaml:"prefix"`
	BaseDenom string                                       `protobuf:"bytes,3,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	Holder    github_com_lcnem_ioux_types.StringAccAddress `protobuf:"bytes,4,opt,name=holder,proto3,customtype=github.com/lcnem/ioux/types.StringAccAddress" json:"holder" yaml:"holder"`
	Amount    types.Coin                                   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *MsgBurnIou) Reset()         { *m = MsgBurnIou{} }
func (m *MsgBurnIou) String() string { return proto.CompactTextString(m) }
func (*MsgBurnIou) ProtoMessage()    {}
func (*MsgBurnIou) Descriptor() ([]byte, []int) {
	return fileDescriptor_25ea6ba5d33a6536, []int{4}
}
func (m *MsgBurnIou) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnIou) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnIou.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnIou) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnIou.Merge(m, src)
}
func (m *MsgBurnIou) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnIou) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnIou.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnIou proto.InternalMessageInfo

func (m *MsgBurnIou) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MsgBurnIou) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *MsgBurnIou) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *MsgBurnIou) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_25ea6ba5d33a6536, []int{5}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Iou)(nil), "ioux.iou.Iou")
	proto.RegisterType((*MsgCreateIou)(nil), "ioux.iou.MsgCreateIou")
	proto.RegisterType((*MsgUpdateIouIssuer)(nil), "ioux.iou.MsgUpdateIouIssuer")
	proto.RegisterType((*MsgIssueIou)(nil), "ioux.iou.MsgIssueIou")
	proto.RegisterType((*MsgBurnIou)(nil), "ioux.iou.MsgBurnIou")
	proto.RegisterType((*Params)(nil), "ioux.iou.Params")
}

func init() { proto.RegisterFile("iou/iou.proto", fileDescriptor_25ea6ba5d33a6536) }

var fileDescriptor_25ea6ba5d33a6536 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0xc0, 0x37, 0xd9, 0x36, 0x74, 0xa7, 0x2d, 0xd8, 0xd0, 0x42, 0xec, 0x21, 0xa9, 0x73, 0xaa,
	0x20, 0x09, 0xad, 0x9e, 0xf4, 0xd4, 0x6d, 0x05, 0x7b, 0x58, 0x90, 0x88, 0x97, 0x82, 0xc8, 0x24,
	0x99, 0x4e, 0x07, 0x76, 0xf2, 0xc2, 0xfc, 0x91, 0xed, 0xb7, 0xf0, 0x73, 0x78, 0xf5, 0xe4, 0x37,
	0x28, 0x7a, 0xe9, 0x51, 0x3c, 0x04, 0xd9, 0xfd, 0x06, 0xfb, 0x09, 0x24, 0x99, 0xe8, 0x42, 0xf1,
	0x50, 0x4b, 0x85, 0x1e, 0x7a, 0xca, 0xcc, 0xbc, 0xf7, 0x7e, 0xef, 0xe5, 0x47, 0x98, 0xa0, 0x75,
	0x0e, 0x26, 0xe1, 0x60, 0xe2, 0x4a, 0x82, 0x06, 0x7f, 0x85, 0x83, 0x99, 0xc4, 0x1c, 0xcc, 0xf6,
	0x26, 0x03, 0x06, 0xed, 0x61, 0xd2, 0xac, 0x6c, 0x7c, 0x3b, 0x62, 0x00, 0x6c, 0x4c, 0x93, 0x76,
	0x97, 0x99, 0xd3, 0x44, 0x73, 0x41, 0x95, 0x26, 0xa2, 0xea, 0x12, 0xc2, 0xab, 0x09, 0x85, 0x91,
	0x44, 0x73, 0x28, 0x7f, 0xc7, 0x73, 0x50, 0x02, 0x54, 0x92, 0x11, 0x45, 0x93, 0x0f, 0x7b, 0x19,
	0xd5, 0x64, 0x2f, 0xc9, 0x81, 0x77, 0x71, 0xfc, 0xc9, 0x45, 0xfd, 0x63, 0x30, 0xfe, 0x3e, 0x1a,
	0x94, 0x44, 0x50, 0x55, 0x91, 0x9c, 0x06, 0xce, 0x8e, 0xb3, 0x3b, 0x18, 0x6e, 0xce, 0xeb, 0xe8,
	0xc1, 0x39, 0x11, 0xe3, 0xe7, 0xf8, 0x4f, 0x08, 0xa7, 0x8b, 0x34, 0xff, 0x19, 0x42, 0x0d, 0xf6,
	0x7d, 0x41, 0x4b, 0x10, 0x81, 0xdb, 0x16, 0x6d, 0xcd, 0xeb, 0x68, 0xc3, 0x16, 0x2d, 0x62, 0x38,
	0x1d, 0x34, 0x9b, 0xa3, 0x66, 0xed, 0xbf, 0x43, 0x1e, 0x57, 0xca, 0x50, 0x19, 0xf4, 0xdb, 0x8a,
	0x97, 0x17, 0x75, 0xd4, 0xfb, 0x51, 0x47, 0x4f, 0x18, 0xd7, 0x67, 0x26, 0x8b, 0x73, 0x10, 0xc9,
	0x38, 0x2f, 0xa9, 0x68, 0x34, 0x4d, 0x12, 0x7d, 0x5e, 0x51, 0x15, 0xbf, 0xd1, 0x92, 0x97, 0xec,
	0x20, 0xcf, 0x0f, 0x8a, 0x42, 0x52, 0xa5, 0xe6, 0x75, 0xb4, 0x6e, 0xbb, 0x58, 0x16, 0x4e, 0x3b,
	0xa8, 0x7f, 0x82, 0x96, 0x49, 0x21, 0x78, 0x19, 0x2c, 0xb5, 0xf4, 0xa3, 0x1b, 0xd2, 0xd7, 0x2c,
	0xbd, 0x45, 0xe1, 0xd4, 0x22, 0xf1, 0x67, 0x17, 0xad, 0x8d, 0x14, 0x3b, 0x94, 0x94, 0x68, 0x7a,
	0x6f, 0xed, 0x9a, 0xd6, 0xbe, 0xb8, 0xc8, 0x1f, 0x29, 0xf6, 0xb6, 0x2a, 0xac, 0xb5, 0x63, 0xdb,
	0xf2, 0xde, 0xdd, 0x35, 0xdc, 0x7d, 0x73, 0xd1, 0xea, 0x48, 0xb1, 0x56, 0xd9, 0x4d, 0x3f, 0xb8,
	0xc7, 0xc8, 0xab, 0x24, 0x3d, 0xe5, 0x93, 0x4e, 0xd8, 0xc6, 0xe2, 0x55, 0xec, 0x39, 0x4e, 0xbb,
	0x84, 0x2b, 0x7e, 0xfb, 0xff, 0xec, 0x77, 0xe9, 0x7f, 0xf8, 0x7d, 0x85, 0x3c, 0x22, 0xc0, 0x94,
	0x3a, 0x58, 0xde, 0x71, 0x76, 0x57, 0xf7, 0x1f, 0xc6, 0xf6, 0x4e, 0x8b, 0x9b, 0x09, 0xe2, 0xee,
	0x4e, 0x8b, 0x0f, 0x81, 0x97, 0xc3, 0xad, 0xa6, 0xf3, 0x82, 0x64, 0xcb, 0x70, 0xda, 0xd5, 0xe3,
	0xaf, 0x2e, 0x42, 0x23, 0xc5, 0x86, 0x46, 0x96, 0x77, 0x59, 0xe6, 0x19, 0x8c, 0x8b, 0xdb, 0x92,
	0x69, 0x59, 0x38, 0xed, 0xa0, 0xb7, 0x28, 0x73, 0x05, 0x79, 0xaf, 0x89, 0x24, 0x42, 0x0d, 0x5f,
	0x5c, 0x4c, 0x43, 0xe7, 0x72, 0x1a, 0x3a, 0x3f, 0xa7, 0xa1, 0xf3, 0x71, 0x16, 0xf6, 0x2e, 0x67,
	0x61, 0xef, 0xfb, 0x2c, 0xec, 0x9d, 0x3c, 0xfa, 0xfb, 0xd0, 0x93, 0xe6, 0x61, 0x47, 0xcf, 0xbc,
	0xf6, 0x3f, 0xf4, 0xf4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0xc7, 0x0b, 0xff, 0x19, 0x07,
	0x00, 0x00,
}

func (m *Iou) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Iou) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Iou) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Admin.Size()
		i -= size
		if _, err := m.Admin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Issuer.Size()
		i -= size
		if _, err := m.Issuer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintIou(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintIou(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIou) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIou) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIou) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Admin.Size()
		i -= size
		if _, err := m.Admin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Issuer.Size()
		i -= size
		if _, err := m.Issuer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintIou(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintIou(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIouIssuer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIouIssuer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIouIssuer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Admin.Size()
		i -= size
		if _, err := m.Admin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Issuer.Size()
		i -= size
		if _, err := m.Issuer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintIou(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintIou(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueIou) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueIou) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueIou) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Issuer.Size()
		i -= size
		if _, err := m.Issuer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintIou(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintIou(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintIou(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnIou) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnIou) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnIou) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Holder.Size()
		i -= size
		if _, err := m.Holder.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIou(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintIou(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintIou(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintIou(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintIou(dAtA []byte, offset int, v uint64) int {
	offset -= sovIou(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Iou) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = m.Issuer.Size()
	n += 1 + l + sovIou(uint64(l))
	l = m.Admin.Size()
	n += 1 + l + sovIou(uint64(l))
	return n
}

func (m *MsgCreateIou) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = m.Issuer.Size()
	n += 1 + l + sovIou(uint64(l))
	l = m.Admin.Size()
	n += 1 + l + sovIou(uint64(l))
	return n
}

func (m *MsgUpdateIouIssuer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = m.Issuer.Size()
	n += 1 + l + sovIou(uint64(l))
	l = m.Admin.Size()
	n += 1 + l + sovIou(uint64(l))
	return n
}

func (m *MsgIssueIou) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = m.Issuer.Size()
	n += 1 + l + sovIou(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovIou(uint64(l))
	return n
}

func (m *MsgBurnIou) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovIou(uint64(l))
	}
	l = m.Holder.Size()
	n += 1 + l + sovIou(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovIou(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovIou(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIou(x uint64) (n int) {
	return sovIou(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Iou) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIou
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Iou: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Iou: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Admin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIou(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIou
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIou) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIou
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIou: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIou: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Admin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIou(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIou
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIouIssuer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIou
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIouIssuer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIouIssuer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Admin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIou(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIou
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueIou) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIou
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueIou: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueIou: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIou(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIou
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnIou) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIou
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnIou: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnIou: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Holder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIou
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIou
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIou
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIou(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIou
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIou
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIou(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIou
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIou(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIou
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIou
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIou
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIou
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIou
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIou
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIou        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIou          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIou = fmt.Errorf("proto: unexpected end of group")
)
